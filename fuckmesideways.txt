# STAR THRONE - COMPLETE CODEBASE DOCUMENTATION  
# Generated: January 2, 2025
# Total Lines of Code: 12,062
# 
# This file contains the complete architecture documentation and key source code
# for Star Throne, a browser-based real-time strategy game supporting up to 100 players.

================================================================================
## PROJECT STATISTICS
================================================================================

Core Game Engine Files (JavaScript):
- StarThrone.js: 3,405 lines - Main game controller and loop
- GameMap.js: 1,032 lines - Territory generation and galaxy layouts
- GameUI.js: 1,044 lines - UI rendering and interface management
- Renderer.js: 700 lines - Modular rendering system
- Player.js: 649 lines - Player state and AI behavior
- Territory.js: 539 lines - Individual territory logic
- InputHandler.js: 514 lines - Input processing with FSM
- InputStateMachine.js: 458 lines - Finite state machine for inputs
- CombatSystem.js: 423 lines - Combat resolution and throne mechanics
- SupplySystem.js: 352 lines - Supply route management
- Camera.js: 343 lines - Viewport controls and smooth movement
- Probe.js: 122 lines - Probe colonization system

Backend Files (TypeScript):
- GameEngine.ts: 645 lines - Server-authoritative game engine
- gameServer.ts: 423 lines - WebSocket multiplayer server
- gameEngine.ts: 439 lines - Legacy server engine
- vite.ts: 88 lines - Development server setup
- index.ts: 71 lines - Express server initialization
- storage.ts: 39 lines - In-memory data storage
- routes.ts: 15 lines - API route definitions

Frontend Components (React/TypeScript):
- GameConfigScreen.tsx: 370 lines - Single-player configuration
- GameModeSelector.tsx: 287 lines - Game mode selection UI

Shared/Common Files:
- gameConstants.ts: 104 lines - Centralized game configuration

================================================================================
## PROJECT ARCHITECTURE OVERVIEW
================================================================================

Star Throne is a browser-based real-time strategy game built with React and HTML5 Canvas.
The game features a custom 2D Canvas-based rendering engine with advanced territorial
conquest mechanics, probe-based exploration, and multiplayer support.

### FRONTEND ARCHITECTURE
- **React 18** with TypeScript for component-based UI development
- **HTML5 Canvas** for high-performance 2D game rendering (3,405 lines main engine)
- **Custom Game Engine** built in vanilla JavaScript with modular systems
- **Socket.IO Client** for real-time multiplayer communication
- **Finite State Machine** for input handling and game state management
- **Zustand** for lightweight state management
- **Radix UI** component library for accessible UI elements
- **Tailwind CSS** for styling with modern design system
- **Vite** as build tool and development server

### BACKEND ARCHITECTURE  
- **Express.js** server with TypeScript (71 lines)
- **Socket.IO WebSocket** server for real-time multiplayer (423 lines)
- **Server-authoritative game engine** for cheat prevention (645 lines)
- **In-memory storage** using Map-based data structures (39 lines)
- **Game room management** for single-player and multiplayer modes
- **RESTful API** structure ready for future endpoints (15 lines)
- **Session management** with connect-pg-simple
- **Drizzle ORM** configured for PostgreSQL integration

### GAME ENGINE COMPONENTS (12,062 total lines)
1. **StarThrone.js** (3,405 lines) - Main game controller and initialization
2. **GameMap.js** (1,032 lines) - Territory generation using Poisson disk sampling
3. **GameUI.js** (1,044 lines) - In-game overlay UI rendering
4. **Renderer.js** (700 lines) - Modular rendering system with LOD
5. **Player.js** (649 lines) - Player state management and AI behavior
6. **Territory.js** (539 lines) - Individual territory logic and rendering  
7. **InputHandler.js** (514 lines) - User input processing with FSM
8. **InputStateMachine.js** (458 lines) - Finite state machine for game controls
9. **CombatSystem.js** (423 lines) - Combat resolution and throne star mechanics
10. **SupplySystem.js** (352 lines) - Supply route management and fleet transfers
11. **Camera.js** (343 lines) - Viewport management with smooth panning/zooming
12. **Probe.js** (122 lines) - Probe colonization system

### KEY TECHNICAL INNOVATIONS
- **Probe-only colonization system** with hidden army counts until explored
- **Strategic throne star system** with empire collapse mechanics
- **Supreme Commander-style strategic zoom** (0.05x to 8.0x range)
- **Comprehensive fleet command system** with proportional deployment
- **Planetary discovery system** with empire-wide bonuses and effects
- **Organic galaxy generation** with natural boundaries using sine waves
- **Atmospheric parallax starfield** rendering with three depth layers
- **Mobile-optimized touch controls** with pinch-to-zoom and gesture support
- **Advanced AI** with finite state machine behavior and strategic evaluation
- **Performance optimization** with viewport culling and object pooling
- **Server-authoritative architecture** preventing client-side cheating
- **Modular rendering system** with Level of Detail based on zoom level

================================================================================
## CORE ARCHITECTURE PATTERNS
================================================================================

### Modular System Design
The game uses a modular architecture where each major system is encapsulated:

```javascript
// StarThrone.js initialization pattern
this.inputHandler = new InputHandler(this.canvas, this);
this.renderer = new Renderer(this.ctx, this.canvas);
this.combatSystem = new CombatSystem(this);
this.supplySystem = new SupplySystem(this);
```

### Finite State Machine for Input Handling
The input system uses FSM pattern for clean state management:

```javascript
// InputStateMachine.js states
STATES = {
    DEFAULT: 'Default',
    TERRITORY_SELECTED: 'TerritorySelected', 
    ENEMY_SELECTED: 'EnemySelected',
    PROPORTIONAL_DRAG: 'ProportionalDrag'
}
```

### Performance Optimization Patterns
- **Viewport Culling**: Only render territories visible on screen
- **Object Pooling**: Reuse ship animation objects to reduce garbage collection
- **Staggered Updates**: Process AI players across multiple frames
- **LOD Rendering**: Adapt detail level based on zoom level

### Discovery System Architecture
Planet colonization triggers discovery events with empire-wide effects:

```javascript
// Discovery types with probability distribution
DISCOVERY_TYPES = {
    'precursor_weapons': { probability: 0.15, empireBonus: 'attack +10%' },
    'precursor_drive': { probability: 0.15, empireBonus: 'speed +20%' },
    'factory_complex': { probability: 0.10, planetBonus: 'generation +200%' }
}
```

================================================================================
## GAME CONSTANTS AND CONFIGURATION
================================================================================

The game uses centralized constants for balance and configuration:

```typescript
// File: common/gameConstants.ts (104 lines)
export const GAME_CONSTANTS = {
    // Game Core
    DEFAULT_MAP_WIDTH: 2000,
    DEFAULT_MAP_HEIGHT: 2000,
    MAX_TOTAL_PLAYERS: 100,
    
    // Territory & Map Configuration
    TERRITORY_RADIUS: 25,
    CONNECTION_DISTANCE: 80, // Reduced for localized warp lanes
    ARMY_GENERATION_RATE: 3000, // milliseconds per army
    
    // Probe System
    PROBE_LAUNCH_COST_FLEET: 10,
    PROBE_SPEED: 25, // Pixels per second
    
    // Combat
    MIN_ARMY_TO_ATTACK: 2,
    ATTACK_POWER_BASE_MULTIPLIER: 0.8,
    
    // Performance Optimization
    VIEWPORT_UPDATE_INTERVAL_MS: 100,
    AI_PROCESSING_FRAME_DIVISION: 3,
    FPS_UPDATE_INTERVAL_MS: 1000,
    
    // Discovery System
    DISCOVERY_PROBABILITY_HOSTILE: 0.15,
    DISCOVERY_PROBABILITY_FRIENDLY: 0.10,
    DISCOVERY_PROBABILITY_PRECURSOR: 0.40
};
```

================================================================================
## KEY SOURCE CODE COMPONENTS
================================================================================

### Main Game Engine Structure (StarThrone.js - 3,405 lines)

```javascript
// Core class definition with modular systems
export default class StarThrone {
    constructor(config = {}) {
        // Configuration and initialization
        this.config = {
            playerName: config.playerName || 'Player',
            aiCount: config.aiCount || 19,
            mapSize: config.mapSize || 80,
            gameSpeed: config.gameSpeed || 1.0,
            layout: config.layout || 'organic'
        };
        
        // Modular systems
        this.inputHandler = null;
        this.renderer = null; 
        this.combatSystem = null;
        this.supplySystem = null;
        
        // Game state
        this.gameState = 'lobby';
        this.players = [];
        this.probes = [];
        this.discoveryLog = [];
    }
    
    // Main game loop
    update(deltaTime) {
        // Update all game systems with speed multiplier
        const scaledDelta = deltaTime * this.config.gameSpeed;
        
        this.updateProbes(scaledDelta);
        this.updatePlayers(scaledDelta);
        this.updateSupplyRoutes(scaledDelta);
        this.updateDiscoveries(scaledDelta);
        
        // Performance optimization
        this.updateVisibilityData();
    }
}
```

### Galaxy Generation System (GameMap.js - 1,032 lines)

```javascript
// Organic galaxy generation with natural boundaries
class GameMap {
    generateTerritories(count) {
        // Use organic galaxy boundaries instead of rectangular
        const points = [];
        const maxAttempts = count * 50;
        
        for (let i = 0; i < count; i++) {
            let validPoint = false;
            let attempts = 0;
            
            while (!validPoint && attempts < maxAttempts) {
                // Generate point within organic galaxy bounds
                const angle = Math.random() * Math.PI * 2;
                const radius = this.sampleGalaxyRadius();
                const x = this.width/2 + radius * Math.cos(angle);
                const y = this.height/2 + radius * Math.sin(angle);
                
                if (this.isWithinGalaxyBounds(x, y) && 
                    this.isValidPosition(x, y, points)) {
                    points.push({ x, y });
                    validPoint = true;
                }
                attempts++;
            }
        }
        return points;
    }
    
    // Create organic galaxy shape using sine waves
    isWithinGalaxyBounds(x, y) {
        const centerX = this.width / 2;
        const centerY = this.height / 2;
        const normalizedX = (x - centerX) / (this.width / 2);
        const normalizedY = (y - centerY) / (this.height / 2);
        
        const angle = Math.atan2(normalizedY, normalizedX);
        const edgeVariation = 
            0.15 * Math.sin(angle * 3.7) +  // Large bumps
            0.08 * Math.sin(angle * 7.2) +  // Medium bumps  
            0.05 * Math.sin(angle * 11.8) + // Small bumps
            0.03 * Math.sin(angle * 17.3);  // Fine detail
        
        const distanceFromCenter = Math.sqrt(
            normalizedX * normalizedX + normalizedY * normalizedY
        );
        const maxDistance = 0.85 + edgeVariation;
        
        return distanceFromCenter <= maxDistance;
    }
}
```

### Input State Machine (InputStateMachine.js - 458 lines)

```javascript
// Finite State Machine for clean input handling
class InputStateMachine {
    constructor() {
        this.currentState = 'Default';
        this.stateData = {};
        
        this.states = {
            'Default': {
                onLeftClick: (territory) => {
                    if (territory?.ownerId === this.humanPlayerId) {
                        return this.transitionTo('TerritorySelected', {selectedTerritory: territory});
                    } else if (territory?.isColonizable) {
                        return this.transitionTo('EnemySelected', {selectedTerritory: territory});
                    }
                    return this.currentState;
                }
            },
            
            'TerritorySelected': {
                onRightClick: (territory) => {
                    if (territory?.isColonizable) {
                        this.game.launchProbe(this.stateData.selectedTerritory, territory);
                        return this.currentState; // Stay selected for multiple actions
                    }
                    return this.currentState;
                }
            }
        };
    }
    
    handleInput(inputType, data) {
        const state = this.states[this.currentState];
        if (state && state[inputType]) {
            const newState = state[inputType](data);
            if (newState !== this.currentState) {
                this.transitionTo(newState);
            }
        }
    }
}
```

### Combat System with Throne Star Mechanics (CombatSystem.js - 423 lines)

```javascript
// Centralized combat resolution with throne star capture
class CombatSystem {
    resolveCombat(attackingTerritory, defendingTerritory, attackingPlayer) {
        const attackPower = this.calculateAttackPower(attackingTerritory, attackingPlayer);
        const defensePower = this.calculateDefensePower(defendingTerritory);
        
        if (attackPower > defensePower) {
            // Check for throne star capture
            if (defendingTerritory.isThronestar) {
                this.handleThroneCapture(defendingTerritory, attackingPlayer);
                return { result: 'throne_captured', survivor: attackingPlayer };
            }
            
            return { result: 'victory', survivor: attackingPlayer };
        }
        
        return { result: 'defeat', survivor: null };
    }
    
    handleThroneCapture(throneTerritory, conqueror) {
        const defeatedPlayer = this.game.getPlayerById(throneTerritory.ownerId);
        
        // Transfer ALL territories to conqueror (empire collapse)
        defeatedPlayer.territories.forEach(territoryId => {
            const territory = this.game.gameMap.territories[territoryId];
            territory.ownerId = conqueror.id;
            conqueror.territories.push(territoryId);
        });
        
        // Mark defeated player as eliminated
        defeatedPlayer.isEliminated = true;
        defeatedPlayer.territories = [];
        
        // Destroy the throne star to prevent multiple thrones
        throneTerritory.isThronestar = false;
    }
}
```

### Discovery System Implementation (StarThrone.js excerpt)

```javascript
// Planetary discovery system with empire bonuses
processProbeColonization(probe) {
    const discovery = this.generateDiscovery();
    const territory = this.gameMap.territories[probe.toTerritoryId];
    
    // Apply discovery effects
    switch (discovery.effect) {
        case 'precursor_weapons':
            this.playerDiscoveries[probe.playerId].precursorWeapons += 1;
            break;
        case 'factory_complex':
            territory.armyGenerationRate *= 0.5; // 200% generation (half time)
            break;
        case 'hostile_aliens':
            // Probe destroyed, colonization fails
            return { success: false, discovery };
    }
    
    // Add to discovery log for UI notifications
    this.discoveryLog.push({
        timestamp: Date.now(),
        playerId: probe.playerId,
        territoryId: probe.toTerritoryId,
        discovery: discovery
    });
    
    return { success: true, discovery };
}
```

================================================================================
## FRONTEND REACT COMPONENTS
================================================================================

### Game Configuration Screen (GameConfigScreen.tsx - 370 lines)

```typescript
// Single-player game configuration with advanced options
export function GameConfigScreen({ onStartGame, onBack }: GameConfigScreenProps) {
  const [config, setConfig] = useState<GameConfig>({
    mapSize: 80,
    aiPlayerCount: 19,
    playerName: 'Player',
    gameSpeed: 1.0,
    layout: 'organic',
    warpLaneDensity: 80,
    connectionRange: 80,
    nebulaCount: 10
  });

  const mapSizeDescriptions = {
    30: 'Tiny - Fast-paced combat',
    50: 'Small - Quick strategic battles', 
    80: 'Medium - Balanced gameplay',
    120: 'Large - Extended campaigns',
    150: 'Massive - Epic conquests'
  };

  return (
    <div className="game-config-screen">
      <Slider
        value={[config.mapSize]}
        onValueChange={(value) => setConfig({...config, mapSize: value[0]})}
        min={30}
        max={150}
        step={10}
      />
      
      <Select value={config.layout} onValueChange={(layout) => setConfig({...config, layout})}>
        <SelectItem value="organic">Organic - Natural scattered distribution</SelectItem>
        <SelectItem value="spiral">Spiral - Galactic arm formations</SelectItem>
        <SelectItem value="clusters">Clusters - Grouped stellar regions</SelectItem>
        <SelectItem value="core">Core - Dense center with outer shells</SelectItem>
        <SelectItem value="rings">Rings - Concentric stellar rings</SelectItem>
        <SelectItem value="binary">Binary - Two major systems</SelectItem>
      </Select>
    </div>
  );
}
```

================================================================================
## BACKEND MULTIPLAYER ARCHITECTURE
================================================================================

### Server-Authoritative Game Engine (GameEngine.ts - 645 lines)

```typescript
// Secure server-side game engine preventing client cheating
export class GameEngine {
  private gameState: GameState;
  private lastUpdate: number;
  private tickRate: number = 20; // 20 TPS
  private gameSpeed: number;
  
  constructor(config: { mapSize: number; tickRate?: number; gameSpeed?: number }) {
    this.gameSpeed = config.gameSpeed || 1.0;
    this.initializeGame(config.mapSize);
  }
  
  // Server-authoritative command processing
  public executeCommand(playerId: string, command: ClientCommand): CombatResult | CommandError | null {
    // Validate player exists and owns territory
    const player = this.gameState.players[playerId];
    if (!player || player.isEliminated) {
      return { command: command.type, reason: 'Player not found or eliminated', timestamp: Date.now() };
    }
    
    switch (command.type) {
      case CommandType.ATTACK_TERRITORY:
        return this.handleAttackCommand(playerId, command.payload);
      case CommandType.LAUNCH_PROBE:
        return this.handleProbeCommand(playerId, command.payload);
      case CommandType.TRANSFER_ARMIES:
        return this.handleTransferCommand(playerId, command.payload);
      default:
        return { command: command.type, reason: 'Unknown command type', timestamp: Date.now() };
    }
  }
  
  // Delta state broadcasting for network optimization
  public getDeltaSince(lastTick: number): Partial<GameState> {
    const delta: Partial<GameState> = {
      tick: this.tick,
      lastUpdate: this.lastUpdate
    };
    
    // Only include changed territories
    if (this.changedTerritories.size > 0) {
      delta.territories = {};
      this.changedTerritories.forEach(territoryId => {
        delta.territories![territoryId] = this.gameState.territories[territoryId];
      });
    }
    
    // Only include changed players
    if (this.changedPlayers.size > 0) {
      delta.players = {};
      this.changedPlayers.forEach(playerId => {
        delta.players![playerId] = this.gameState.players[playerId];
      });
    }
    
    return delta;
  }
}
```

### WebSocket Multiplayer Server (gameServer.ts - 423 lines)

```typescript
// Real-time multiplayer game server with room management
export class GameServer {
  private io: SocketServer;
  private rooms: Map<string, GameRoom> = new Map();
  private playerToRoom: Map<string, string> = new Map();
  
  constructor(server: Server) {
    this.io = new SocketServer(server, {
      cors: { origin: "*", methods: ["GET", "POST"] }
    });
    this.setupSocketHandlers();
  }
  
  private setupSocketHandlers() {
    this.io.on('connection', (socket) => {
      socket.on('create-room', (data: { playerName: string, aiCount: number, mapSize: number }) => {
        const roomId = this.generateRoomId();
        const room: GameRoom = {
          id: roomId,
          name: `${data.playerName}'s Game`,
          players: new Map(),
          gameEngine: null,
          gameLoop: null,
          isStarted: false,
          maxPlayers: 100,
          aiPlayerCount: data.aiCount,
          gameMode: 'multiplayer'
        };
        
        this.rooms.set(roomId, room);
        this.joinRoom(socket, roomId, data.playerName);
        this.startGame(roomId, data.mapSize);
      });
      
      socket.on('player-command', (command: ClientCommand) => {
        const roomId = this.playerToRoom.get(socket.id);
        const room = roomId ? this.rooms.get(roomId) : null;
        
        if (room?.gameEngine) {
          const result = room.gameEngine.executeCommand(socket.id, command);
          if (result) {
            socket.emit('command-result', result);
          }
        }
      });
    });
  }
  
  private startGameLoop(roomId: string) {
    const room = this.rooms.get(roomId);
    if (!room?.gameEngine) return;
    
    const targetFPS = 20; // 20 TPS for server
    const frameTime = 1000 / targetFPS;
    
    room.gameLoop = setInterval(() => {
      const now = Date.now();
      const deltaTime = now - room.lastUpdate;
      room.lastUpdate = now;
      
      // Update game engine
      room.gameEngine!.update(deltaTime);
      
      // Broadcast delta state to all players
      const delta = room.gameEngine!.getDeltaSince(room.lastSentTick);
      this.broadcastGameStateUpdate(roomId, delta);
      room.lastSentTick = room.gameEngine!.tick;
      
    }, frameTime);
  }
}
```

================================================================================
## PERFORMANCE OPTIMIZATION STRATEGIES
================================================================================

### Viewport Culling System
```javascript
// Only render territories visible on screen
updateVisibilityData() {
    if (Date.now() - this.lastVisibilityUpdate < GAME_CONSTANTS.VIEWPORT_UPDATE_INTERVAL_MS) {
        return; // Throttle visibility updates to 100ms intervals
    }
    
    const viewBounds = this.camera.getViewBounds();
    this.visibleTerritories = Object.values(this.gameMap.territories).filter(territory => {
        return territory.x >= viewBounds.left && territory.x <= viewBounds.right &&
               territory.y >= viewBounds.top && territory.y <= viewBounds.bottom;
    });
    
    this.performanceStats.visibleTerritories = this.visibleTerritories.length;
    this.lastVisibilityUpdate = Date.now();
}
```

### AI Update Staggering
```javascript
// Process 1/3 of AI players per frame for better performance
updatePlayers(deltaTime) {
    const playersToUpdate = this.players.filter(p => p.type === 'ai');
    const batchSize = Math.ceil(playersToUpdate.length / GAME_CONSTANTS.AI_PROCESSING_FRAME_DIVISION);
    const startIndex = (this.currentAIBatch * batchSize) % playersToUpdate.length;
    
    for (let i = 0; i < batchSize; i++) {
        const index = (startIndex + i) % playersToUpdate.length;
        const player = playersToUpdate[index];
        player.update(deltaTime);
    }
    
    this.currentAIBatch = (this.currentAIBatch + 1) % GAME_CONSTANTS.AI_PROCESSING_FRAME_DIVISION;
}
```

### Object Pooling for Ship Animations
```javascript
// Reuse animation objects to reduce garbage collection
class AnimationPool {
    constructor(initialSize = 50) {
        this.pool = [];
        this.active = [];
        
        // Pre-allocate animation objects
        for (let i = 0; i < initialSize; i++) {
            this.pool.push(this.createAnimationObject());
        }
    }
    
    getAnimation() {
        if (this.pool.length > 0) {
            return this.pool.pop();
        }
        return this.createAnimationObject();
    }
    
    releaseAnimation(animation) {
        // Reset and return to pool
        animation.reset();
        this.pool.push(animation);
    }
}
```

================================================================================
## DEPLOYMENT AND BUILD CONFIGURATION
================================================================================

### Package.json Configuration
```json
{
  "name": "star-throne",
  "version": "1.0.0",
  "scripts": {
    "dev": "tsx server/index.ts",
    "build": "vite build",
    "preview": "vite preview"
  },
  "dependencies": {
    "react": "^18.2.0",
    "socket.io": "^4.7.2",
    "express": "^4.18.2",
    "@radix-ui/react-slider": "latest",
    "drizzle-orm": "latest",
    "zustand": "latest"
  }
}
```

### Vite Configuration (vite.config.ts)
```typescript
export default defineConfig({
  plugins: [
    react(),
    runtimeErrorModal()
  ],
  server: {
    host: '0.0.0.0',
    port: 3000
  },
  build: {
    outDir: 'dist/public',
    rollupOptions: {
      external: ['three']
    }
  }
});
```

================================================================================
## CONCLUSION
================================================================================

Star Throne represents a sophisticated browser-based RTS game with:

- **12,062 lines of code** across frontend and backend
- **Modular architecture** with clear separation of concerns
- **Server-authoritative multiplayer** preventing cheating
- **Advanced performance optimization** supporting 100+ players
- **Mobile-first design** with touch controls and responsive UI
- **Rich discovery system** with empire-wide bonuses
- **Strategic gameplay mechanics** including throne star conquest

The codebase demonstrates modern web game development practices with:
- TypeScript for type safety
- React for UI components  
- Canvas for high-performance rendering
- WebSocket for real-time multiplayer
- Finite State Machines for input handling
- Object pooling and viewport culling for optimization

This documentation provides a complete overview of the game's architecture,
key algorithms, and implementation details for future development and maintenance.

================================================================================
## END OF DOCUMENTATION
================================================================================
