diff --git a/client/src/game/InputHandler.js b/client/src/game/InputHandler.js
index 614a9072181831c060aca18dc51572fb8cc60834..ea000fa2c05b2e933bfed894c71ab4526f6243d7 100644
--- a/client/src/game/InputHandler.js
+++ b/client/src/game/InputHandler.js
@@ -17,70 +17,77 @@ export class InputHandler {
 
         this.touchState = {
             activeTouches: new Map(),
             lastTouchDistance: null,
             lastPinchCenter: null
         };
 
         this._onMouseDown = (e) => this.handleMouseDown(e);
         this._onMouseMove = (e) => this.handleMouseMove(e);
         this._onMouseUp = (e) => this.handleMouseUp(e);
         this._onWheel = (e) => this.handleWheel(e);
         this._onContextMenu = (e) => e.preventDefault();
         this._onTouchStart = (e) => this.handleTouchStart(e);
         this._onTouchMove = (e) => this.handleTouchMove(e);
         this._onTouchEnd = (e) => this.handleTouchEnd(e);
 
         this.setupEventListeners();
     }
 
     setupEventListeners() {
         if (!this.canvas) {
             console.error('‚ùå InputHandler: No canvas available for event listeners');
             return;
         }
         console.log('‚úÖ InputHandler: Setting up event listeners');
-        this.canvas.addEventListener('mousedown', this._onMouseDown);
-        this.canvas.addEventListener('mousemove', this._onMouseMove);
-        this.canvas.addEventListener('mouseup', this._onMouseUp);
-        // Listen on the document as well so drag events continue even if the
-        // cursor leaves the canvas bounds. This fixes lost drag releases when
-        // the mouse is released outside of the canvas.
-        document.addEventListener('mousemove', this._onMouseMove);
-        document.addEventListener('mouseup', this._onMouseUp);
+        // Use pointer events with capture so dragging continues even if the
+        // pointer leaves the canvas element. This is more reliable across
+        // browsers than plain mouse events.
+        this.canvas.addEventListener('pointerdown', this._onMouseDown);
+        this.canvas.addEventListener('pointermove', this._onMouseMove);
+        this.canvas.addEventListener('pointerup', this._onMouseUp);
+        this.canvas.addEventListener('pointercancel', this._onMouseUp);
         this.canvas.addEventListener('wheel', this._onWheel);
         this.canvas.addEventListener('contextmenu', this._onContextMenu);
 
         this.canvas.addEventListener('touchstart', this._onTouchStart, { passive: false });
         this.canvas.addEventListener('touchmove', this._onTouchMove, { passive: false });
         this.canvas.addEventListener('touchend', this._onTouchEnd, { passive: false });
         this.canvas.addEventListener('touchcancel', this._onTouchEnd, { passive: false });
     }
 
     handleMouseDown(e) {
         console.log('üê≠ Mouse down event received!');
         e.preventDefault();
+        // Capture pointer so move/up events continue even if it leaves the canvas
+        if (typeof e.pointerId === 'number' && this.canvas.setPointerCapture) {
+            try {
+                this.canvas.setPointerCapture(e.pointerId);
+            } catch {
+                // Ignore errors if pointer capture isn't supported
+            }
+        }
         const rect = this.canvas.getBoundingClientRect();
         this.mousePos = { x: e.clientX - rect.left, y: e.clientY - rect.top };
         this.lastMousePos = { ...this.mousePos };
 
         const worldPos = this.game.camera.screenToWorld(this.mousePos.x, this.mousePos.y);
         const territory = this.game.findTerritoryAt(worldPos.x, worldPos.y);
         
         console.log('üîç Mouse down details:', {
             screenPos: this.mousePos,
             worldPos: worldPos,
             territory: territory ? territory.id : 'none',
             humanPlayerId: this.game.humanPlayer?.id,
             territoryOwner: territory?.ownerId
         });
 
         if (territory && territory.ownerId === this.game.humanPlayer?.id) {
             // Begin fleet drag from owned territory
             console.log('üéØ Starting fleet drag from territory', territory.id, 'with', territory.armySize, 'armies');
             this.isFleetDragging = true;
             this.fleetSource = territory;
             this.isDragging = false;
             console.log('üöÄ Fleet drag started for player territory', territory.id);
         } else {
             // Start panning the map
             this.isDragging = true;
diff --git a/client/src/game/InputHandler.js b/client/src/game/InputHandler.js
index 614a9072181831c060aca18dc51572fb8cc60834..ea000fa2c05b2e933bfed894c71ab4526f6243d7 100644
--- a/client/src/game/InputHandler.js
+++ b/client/src/game/InputHandler.js
@@ -90,50 +97,58 @@ export class InputHandler {
 
     handleMouseMove(e) {
         const rect = this.canvas.getBoundingClientRect();
         const newPos = { x: e.clientX - rect.left, y: e.clientY - rect.top };
 
         if (this.isFleetDragging) {
             // Just update position for preview
             console.log('üéØ Fleet dragging - updating preview position');
         } else if (this.isDragging) {
             const dx = newPos.x - this.lastMousePos.x;
             const dy = newPos.y - this.lastMousePos.y;
             this.game.camera.pan(-dx, -dy);
         }
 
         this.game.camera.updateEdgePanning(newPos.x, newPos.y, 16);
         const worldPos = this.game.camera.screenToWorld(newPos.x, newPos.y);
         this.hoveredTerritory = this.game.findTerritoryAt(worldPos.x, worldPos.y);
         this.lastMousePos = newPos;
         this.mousePos = newPos;
     }
 
     handleMouseUp(e) {
         const rect = this.canvas.getBoundingClientRect();
         const releasePos = { x: e.clientX - rect.left, y: e.clientY - rect.top };
 
+        if (typeof e.pointerId === 'number' && this.canvas.releasePointerCapture) {
+            try {
+                this.canvas.releasePointerCapture(e.pointerId);
+            } catch {
+                // Ignore errors if pointer capture isn't supported
+            }
+        }
+
         if (this.isFleetDragging && this.fleetSource) {
             const worldPos = this.game.camera.screenToWorld(releasePos.x, releasePos.y);
             const target = this.game.findTerritoryAt(worldPos.x, worldPos.y);
             console.log('üéØ Fleet drag release:', {
                 source: this.fleetSource.id,
                 target: target ? target.id : 'none',
                 sourceArmies: this.fleetSource.armySize
             });
             if (target && target.id !== this.fleetSource.id) {
                 console.log('üöÄ Issuing fleet command from', this.fleetSource.id, 'to', target.id);
                 this.game.issueFleetCommand(this.fleetSource, target, 0.5);
             }
         }
 
         this.isDragging = false;
         this.isFleetDragging = false;
         this.fleetSource = null;
         console.log('üîö Mouse up - fleet drag ended');
     }
 
     handleWheel(e) {
         e.preventDefault();
         const rect = this.canvas.getBoundingClientRect();
         const mouseX = e.clientX - rect.left;
         const mouseY = e.clientY - rect.top;
diff --git a/client/src/game/InputHandler.js b/client/src/game/InputHandler.js
index 614a9072181831c060aca18dc51572fb8cc60834..ea000fa2c05b2e933bfed894c71ab4526f6243d7 100644
--- a/client/src/game/InputHandler.js
+++ b/client/src/game/InputHandler.js
@@ -186,40 +201,39 @@ export class InputHandler {
         for (const t of e.changedTouches) {
             this.touchState.activeTouches.delete(t.identifier);
         }
         if (this.touchState.activeTouches.size < 2) {
             this.touchState.lastTouchDistance = null;
             this.touchState.lastPinchCenter = null;
         }
         this.isDragging = false;
     }
 
     getInputState() {
         return {
             mousePos: this.mousePos,
             isDragging: this.isDragging || this.isFleetDragging,
             selectedTerritory: this.isFleetDragging ? null : null, // Don't show selected territory during fleet drag
             fleetDragging: this.isFleetDragging,
             fleetSource: this.fleetSource,
             currentState: 'idle'
         };
     }
 
     update() {}
 
     cleanup() {
         if (!this.canvas) return;
-        this.canvas.removeEventListener('mousedown', this._onMouseDown);
-        this.canvas.removeEventListener('mousemove', this._onMouseMove);
-        this.canvas.removeEventListener('mouseup', this._onMouseUp);
-        document.removeEventListener('mousemove', this._onMouseMove);
-        document.removeEventListener('mouseup', this._onMouseUp);
+        this.canvas.removeEventListener('pointerdown', this._onMouseDown);
+        this.canvas.removeEventListener('pointermove', this._onMouseMove);
+        this.canvas.removeEventListener('pointerup', this._onMouseUp);
+        this.canvas.removeEventListener('pointercancel', this._onMouseUp);
         this.canvas.removeEventListener('wheel', this._onWheel);
         this.canvas.removeEventListener('contextmenu', this._onContextMenu);
         this.canvas.removeEventListener('touchstart', this._onTouchStart);
         this.canvas.removeEventListener('touchmove', this._onTouchMove);
         this.canvas.removeEventListener('touchend', this._onTouchEnd);
         this.canvas.removeEventListener('touchcancel', this._onTouchEnd);
         this.canvas = null;
         this.game = null;
     }
 }
