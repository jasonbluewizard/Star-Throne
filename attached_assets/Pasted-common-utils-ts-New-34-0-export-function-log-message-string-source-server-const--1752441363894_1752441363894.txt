common/utils.ts
New
+34
-0

export function log(message: string, source = 'server') {
  const formattedTime = new Date().toLocaleTimeString('en-US', {
    hour: 'numeric',
    minute: '2-digit',
    second: '2-digit',
    hour12: true,
  });
  console.log(`${formattedTime} [${source}] ${message}`);
}

const COLORS = [
  '#FF6B6B', '#4ECDC4', '#45B7D1', '#96CEB4', '#FFEAA7',
  '#DDA0DD', '#98D8C8', '#F7DC6F', '#BB8FCE', '#85C1E9',
];

export function generatePlayerColor(index: number): string {
  return COLORS[index % COLORS.length];
}

const FIRST_NAMES = [
  'Alex', 'Blake', 'Casey', 'Dana', 'Emma', 'Felix', 'Grace', 'Hunter', 'Iris', 'Jack',
  'Kai', 'Luna', 'Max', 'Nova', 'Owen', 'Piper', 'Quinn', 'Riley', 'Sage', 'Tyler',
];

const CLAN_NAMES = [
  'StarForge', 'VoidHunters', 'NebulaRise', 'CosmicFury', 'SolarFlare', 'DarkMatter',
  'GalaxyCorp', 'NovaStrike', 'CelestialWar', 'SpaceRaiders', 'StellarWolves', 'OrbitClan',
];

export function generateAIName(index: number): string {
  const firstName = FIRST_NAMES[index % FIRST_NAMES.length];
  const clanName = CLAN_NAMES[Math.floor(index / FIRST_NAMES.length) % CLAN_NAMES.length];
  return `[${clanName}] ${firstName}`;
}
server/GameEngine.ts
+7
-6

import { GameState, PlayerState, TerritoryState, ProbeState, SupplyRoute, CommandType, ClientCommand, AttackTerritoryCommand, TransferArmiesCommand, LaunchProbeCommand, CreateSupplyRouteCommand, CombatResult, CommandError } from '../common/types/index.js';
import { GAME_CONSTANTS } from '../common/gameConstants';
import { log } from '../common/utils.js';

export class GameEngine {
  private gameState: GameState;
  private lastUpdate: number;
  private tickRate: number;
  private gameSpeed: number;
  
  // Delta tracking for optimized network updates
  private changedTerritories: Set<number> = new Set();
  private changedPlayers: Set<string> = new Set();
  private changedProbes: boolean = false;
  
  // Public access to tick for delta tracking
  public get tick(): number {
    return this.gameState.tick;
  }

  constructor(config: { mapSize: number; tickRate?: number; gameSpeed?: number }) {
    this.tickRate = config.tickRate || 20; // 20 updates per second
    this.gameSpeed = config.gameSpeed || 1.0; // Normal speed default
    this.lastUpdate = Date.now();
    
    this.gameState = {
      territories: {},
      players: {},
@@ -37,51 +38,51 @@ export class GameEngine {
  }

  private generateMap(territoryCount: number): void {
    // Generate territories using Poisson disk sampling
    const territories = this.poissonDiskSampling(territoryCount, 2000, 2000);
    
    territories.forEach((pos, index) => {
      const territory: TerritoryState = {
        id: index,
        ownerId: null,
        armySize: 0,
        x: pos.x,
        y: pos.y,
        radius: GAME_CONSTANTS.TERRITORY_RADIUS,
        neighbors: [],
        hiddenNeighbors: [],
        isColonizable: true,
        hiddenArmySize: Math.floor(Math.random() * 25) + 1,
        lastCombatFlash: 0
      };
      
      this.gameState.territories[index] = territory;
    });

    this.connectTerritories();
    console.log(`Generated ${territoryCount} territories with connections`);
    log(`Generated ${territoryCount} territories with connections`);
  }

  private poissonDiskSampling(numSamples: number, width: number, height: number): { x: number; y: number }[] {
    const minDistance = 80;
    const maxAttempts = 30;
    const cellSize = minDistance / Math.sqrt(2);
    const gridWidth = Math.ceil(width / cellSize);
    const gridHeight = Math.ceil(height / cellSize);
    
    const grid: number[][] = Array(gridHeight).fill(null).map(() => Array(gridWidth).fill(-1));
    const points: { x: number; y: number }[] = [];
    const activeList: number[] = [];

    // Initial point
    const firstPoint = {
      x: Math.random() * width,
      y: Math.random() * height
    };
    
    points.push(firstPoint);
    activeList.push(0);
    
    const gridX = Math.floor(firstPoint.x / cellSize);
    const gridY = Math.floor(firstPoint.y / cellSize);
    grid[gridY][gridX] = 0;
@@ -161,57 +162,57 @@ export class GameEngine {
        );
        
        if (distance <= GAME_CONSTANTS.CONNECTION_DISTANCE) {
          // All connections are hidden initially since all territories are colonizable
          territory1.hiddenNeighbors.push(territory2.id);
          territory2.hiddenNeighbors.push(territory1.id);
        }
      }
    }
  }

  public addPlayer(playerId: string, name: string, color: string, type: 'human' | 'ai'): void {
    const player: PlayerState = {
      id: playerId,
      name,
      color,
      type,
      territoriesOwned: 0,
      totalArmies: 0,
      isEliminated: false,
      territories: [],
      armyGenRate: 1
    };

    this.gameState.players[playerId] = player;
    console.log(`Player ${name} (${type}) added to game`);
    log(`Player ${name} (${type}) added to game`);
  }

  public startGame(): void {
    this.gameState.gamePhase = 'playing';
    this.distributeStartingTerritories();
    console.log('Game started with server-authoritative engine');
    log('Game started with server-authoritative engine');
  }

  private distributeStartingTerritories(): void {
    const players = Object.values(this.gameState.players);
    const territories = Object.values(this.gameState.territories);
    const availableTerritories = [...territories];
    
    // Shuffle territories
    for (let i = availableTerritories.length - 1; i > 0; i--) {
      const j = Math.floor(Math.random() * (i + 1));
      [availableTerritories[i], availableTerritories[j]] = [availableTerritories[j], availableTerritories[i]];
    }

    // Give each player exactly one starting territory
    players.forEach((player, index) => {
      if (index < availableTerritories.length) {
        const territory = availableTerritories[index];
        this.colonizeTerritory(territory.id, player.id, 50);
      }
    });

    this.updatePlayerStats();
  }

  private colonizeTerritory(territoryId: number, playerId: string, armySize: number): void {
@@ -263,51 +264,51 @@ export class GameEngine {
      const probe = this.gameState.probes[i];
      const elapsed = Date.now() - probe.startTime;
      probe.progress = Math.min(1.0, elapsed / probe.duration);

      if (probe.progress >= 1.0) {
        this.completeProbeColonization(probe);
        this.gameState.probes.splice(i, 1);
        probesChanged = true;
      }
    }
    
    // Track probe changes for delta updates
    if (probesChanged) {
      this.changedProbes = true;
    }
  }

  private completeProbeColonization(probe: ProbeState): void {
    const territory = this.gameState.territories[probe.toTerritoryId];
    if (!territory || territory.ownerId !== null) return;

    this.colonizeTerritory(probe.toTerritoryId, probe.playerId, 1);
    // Track territory and player changes for delta updates
    this.changedTerritories.add(probe.toTerritoryId);
    this.changedPlayers.add(probe.playerId);
    console.log(`Probe colonized territory ${probe.toTerritoryId} for player ${probe.playerId}`);
    log(`Probe colonized territory ${probe.toTerritoryId} for player ${probe.playerId}`);
  }

  private generateArmies(deltaTime: number): void {
    Object.values(this.gameState.territories).forEach(territory => {
      if (territory.ownerId) {
        const player = this.gameState.players[territory.ownerId];
        if (player && !player.isEliminated) {
          // Apply game speed multiplier to army generation
          const speedAdjustedDelta = deltaTime * this.gameSpeed;
          const generationChance = speedAdjustedDelta / GAME_CONSTANTS.ARMY_GENERATION_RATE;
          if (Math.random() < generationChance) {
            territory.armySize++;
            // Track territory change for delta updates
            this.changedTerritories.add(territory.id);
            this.changedPlayers.add(territory.ownerId);
          }
        }
      }
    });
  }

  private processSupplyRoutes(deltaTime: number): void {
    // Implementation for supply route processing
    // This would handle the delayed transfers between territories
  }
@@ -334,65 +335,65 @@ export class GameEngine {
    const randomTerritory = ownedTerritories[Math.floor(Math.random() * ownedTerritories.length)];
    
    if (randomTerritory.armySize >= GAME_CONSTANTS.PROBE_COST) {
      // Try to find a colonizable neighbor
      const colonizableNeighbors = randomTerritory.neighbors
        .map(id => this.gameState.territories[id])
        .filter(t => t && t.isColonizable && t.ownerId === null);
      
      if (colonizableNeighbors.length > 0) {
        const target = colonizableNeighbors[Math.floor(Math.random() * colonizableNeighbors.length)];
        this.executeCommand(player.id, {
          type: CommandType.LAUNCH_PROBE,
          payload: { fromTerritoryId: randomTerritory.id, toTerritoryId: target.id },
          timestamp: Date.now()
        });
      }
    }
  }

  private checkWinConditions(): void {
    const alivePlayers = Object.values(this.gameState.players).filter(p => !p.isEliminated && p.territories.length > 0);
    
    if (alivePlayers.length === 1) {
      this.gameState.gamePhase = 'ended';
      this.gameState.winner = alivePlayers[0].id;
      console.log(`Game ended. Winner: ${alivePlayers[0].name}`);
      log(`Game ended. Winner: ${alivePlayers[0].name}`);
    }
  }

  private updatePlayerStats(): void {
    Object.values(this.gameState.players).forEach(player => {
      player.territoriesOwned = player.territories.length;
      player.totalArmies = player.territories
        .map(id => this.gameState.territories[id])
        .filter(Boolean)
        .reduce((sum, territory) => sum + territory.armySize, 0);
      
      if (player.territoriesOwned === 0 && !player.isEliminated) {
        player.isEliminated = true;
        console.log(`Player ${player.name} eliminated`);
        log(`Player ${player.name} eliminated`);
      }
    });
  }

  public executeCommand(playerId: string, command: ClientCommand): CombatResult | CommandError | null {
    const player = this.gameState.players[playerId];
    if (!player || player.isEliminated) {
      return { command: command.type, reason: 'Player not found or eliminated', timestamp: Date.now() };
    }

    switch (command.type) {
      case CommandType.ATTACK_TERRITORY:
        return this.handleAttackCommand(playerId, command.payload as AttackTerritoryCommand);
      
      case CommandType.TRANSFER_ARMIES:
        return this.handleTransferCommand(playerId, command.payload as TransferArmiesCommand);
      
      case CommandType.LAUNCH_PROBE:
        return this.handleProbeCommand(playerId, command.payload as LaunchProbeCommand);
      
      case CommandType.CREATE_SUPPLY_ROUTE:
        return this.handleSupplyRouteCommand(playerId, command.payload as CreateSupplyRouteCommand);
      
      default:
        return { command: command.type, reason: 'Unknown command type', timestamp: Date.now() };
server/gameServer.ts
+9
-31

import { Server as SocketServer } from 'socket.io';
import { Server } from 'http';
import { GameEngine } from './GameEngine.js';
import { PlayerState, GameConfig, ClientCommand, CommandType, GameStateUpdate, CombatResult, CommandError, GameState } from '../common/types/index.js';
import { GAME_CONSTANTS } from '../common/gameConstants';
import { generateAIName, generatePlayerColor, log } from '../common/utils.js';

interface Player {
  id: string;
  name: string;
  color: string;
  type: 'human' | 'ai';
  socketId?: string;
  territories: number[];
  armyGenRate: number;
  totalArmies: number;
  territoriesOwned: number;
  isEliminated: boolean;
  ready: boolean;
}

interface GameRoom {
  id: string;
  name: string;
  players: Map<string, Player>;
  gameEngine: GameEngine | null;
  gameLoop: NodeJS.Timeout | null;
  isStarted: boolean;
  maxPlayers: number;
  aiPlayerCount: number;
  gameMode: 'single' | 'multiplayer';
  lastUpdate: number;
  tickRate: number;
  lastSentTick: number;
}

export class GameServer {
  private io: SocketServer;
  private rooms: Map<string, GameRoom> = new Map();
  private playerToRoom: Map<string, string> = new Map();

  constructor(server: Server) {
    this.io = new SocketServer(server, {
      cors: {
        origin: "*",
        methods: ["GET", "POST"]
      }
    });

    this.setupSocketHandlers();
  }

  private setupSocketHandlers() {
    this.io.on('connection', (socket) => {
      console.log(`Player connected: ${socket.id}`);
      log(`Player connected: ${socket.id}`);

      // Handle creating a new game room
      socket.on('create-room', (data: { roomName: string, playerName: string, maxPlayers: number, aiCount: number }) => {
        const roomId = this.generateRoomId();
        const room: GameRoom = {
          id: roomId,
          name: data.roomName,
          players: new Map(),
          gameEngine: null,
          gameLoop: null,
          isStarted: false,
          maxPlayers: data.maxPlayers,
          aiPlayerCount: data.aiCount,
          gameMode: 'multiplayer',
          lastUpdate: Date.now(),
          tickRate: 20,
          lastSentTick: 0
        };

        this.rooms.set(roomId, room);
        this.joinRoom(socket, roomId, data.playerName);
        
        socket.emit('room-created', { roomId, room: this.getRoomInfo(room) });
      });

@@ -151,187 +152,171 @@ export class GameServer {
        const roomId = this.playerToRoom.get(socket.id);
        if (!roomId) return;

        const room = this.rooms.get(roomId);
        if (!room) return;

        const player = room.players.get(socket.id);
        if (!player) return;

        player.ready = true;

        // In multiplayer, check if all players are ready
        if (room.gameMode === 'multiplayer') {
          const allReady = Array.from(room.players.values())
            .filter(p => p.type === 'human')
            .every(p => p.ready);

          if (allReady && room.players.size > 0) {
            this.startGame(roomId);
          }
        }
      });

      // Handle disconnection
      socket.on('disconnect', () => {
        console.log(`Player disconnected: ${socket.id}`);
        log(`Player disconnected: ${socket.id}`);
        this.handleDisconnect(socket);
      });
    });
  }

  private joinRoom(socket: any, roomId: string, playerName: string) {
    const room = this.rooms.get(roomId);
    if (!room) return;

    const player: Player = {
      id: socket.id,
      name: playerName,
      color: this.generatePlayerColor(room.players.size),
      color: generatePlayerColor(room.players.size),
      type: 'human',
      socketId: socket.id,
      territories: [],
      armyGenRate: 1,
      totalArmies: 0,
      territoriesOwned: 0,
      isEliminated: false,
      ready: false
    };

    room.players.set(socket.id, player);
    this.playerToRoom.set(socket.id, roomId);
    
    socket.join(roomId);
    
    // Notify other players in the room
    socket.to(roomId).emit('player-joined', { player: this.getPlayerInfo(player) });
  }

  private startGame(roomId: string, mapSize: number = 200, gameSpeed: number = 1.0) {
    const room = this.rooms.get(roomId);
    if (!room) return;

    room.isStarted = true;
    
    // Initialize server-authoritative game engine with game speed
    room.gameEngine = new GameEngine({ mapSize, tickRate: room.tickRate, gameSpeed });
    
    // Add all players to the game engine
    Array.from(room.players.values()).forEach(player => {
      room.gameEngine!.addPlayer(player.id, player.name, player.color, player.type);
    });
    
    // Add AI players
    for (let i = 0; i < room.aiPlayerCount; i++) {
      const aiId = `ai_${i}`;
      const aiName = this.generateAIName(i);
      const aiColor = this.generatePlayerColor(room.players.size + i);
      const aiName = generateAIName(i);
      const aiColor = generatePlayerColor(room.players.size + i);
      room.gameEngine!.addPlayer(aiId, aiName, aiColor, 'ai');
    }
    
    // Start the game
    room.gameEngine.startGame();
    
    // Start the server game loop
    this.startGameLoop(roomId);

    // Send initial game state to all players
    const gameState = room.gameEngine.getGameState();
    this.io.to(roomId).emit('game-started', { 
      gameState,
      players: Object.values(gameState.players)
    });

    console.log(`Server-authoritative game started in room ${roomId} with ${room.players.size} human players and ${room.aiPlayerCount} AI players`);
    log(`Server-authoritative game started in room ${roomId} with ${room.players.size} human players and ${room.aiPlayerCount} AI players`);
  }

  private startGameLoop(roomId: string) {
    const room = this.rooms.get(roomId);
    if (!room || !room.gameEngine) return;

    const tickInterval = 1000 / room.tickRate; // Convert to milliseconds
    let lastUpdate = Date.now();

    room.gameLoop = setInterval(() => {
      const now = Date.now();
      const deltaTime = now - lastUpdate;
      lastUpdate = now;

      // Update game engine
      room.gameEngine!.update(deltaTime);

      // Broadcast delta state updates to all players (only changed data)
      this.broadcastGameStateUpdate(
        roomId,
        room.gameEngine!.getDeltaSince(room.lastSentTick)
      );
      room.lastSentTick = room.gameEngine!.tick;

      // Check if game ended
      const currentGameState = room.gameEngine!.getGameState();
      if (currentGameState.gamePhase === 'ended') {
        this.endGame(roomId);
      }
    }, tickInterval);
  }

  private broadcastGameStateUpdate(roomId: string, delta: Partial<GameState>) {
    const update: GameStateUpdate = {
      type: 'DELTA_STATE',
      gameState: delta,
      timestamp: Date.now()
    };
    
    this.io.to(roomId).emit('game-state-update', update);
  }

  private endGame(roomId: string) {
    const room = this.rooms.get(roomId);
    if (!room || !room.gameLoop) return;

    clearInterval(room.gameLoop);
    room.gameLoop = null;
    
    console.log(`Game ended in room ${roomId}`);
    log(`Game ended in room ${roomId}`);
  }

  private generateAIName(index: number): string {
    const firstNames = [
      'Alex', 'Blake', 'Casey', 'Dana', 'Emma', 'Felix', 'Grace', 'Hunter', 'Iris', 'Jack',
      'Kai', 'Luna', 'Max', 'Nova', 'Owen', 'Piper', 'Quinn', 'Riley', 'Sage', 'Tyler'
    ];
    
    const clanNames = [
      'StarForge', 'VoidHunters', 'NebulaRise', 'CosmicFury', 'SolarFlare', 'DarkMatter',
      'GalaxyCorp', 'NovaStrike', 'CelestialWar', 'SpaceRaiders', 'StellarWolves', 'OrbitClan'
    ];
    
    const firstName = firstNames[index % firstNames.length];
    const clanName = clanNames[Math.floor(index / firstNames.length) % clanNames.length];
    
    return `[${clanName}] ${firstName}`;
  }

  private handleGameAction(socket: any, room: GameRoom, action: string, payload: any) {
    const player = room.players.get(socket.id);
    if (!player) return;

    // Validate and process game actions
    switch (action) {
      case 'select-territory':
        // Handle territory selection
        this.broadcastGameUpdate(room.id, {
          type: 'territory-selected',
          playerId: player.id,
          territoryId: payload.territoryId
        });
        break;

      case 'launch-probe':
        // Handle probe launch
        this.broadcastGameUpdate(room.id, {
          type: 'probe-launched',
          playerId: player.id,
          fromTerritory: payload.fromTerritory,
          toTerritory: payload.toTerritory
        });
        break;
@@ -356,68 +341,61 @@ export class GameServer {
        });
        break;
    }
  }

  private broadcastGameUpdate(roomId: string, update: any) {
    this.io.to(roomId).emit('game-update', update);
  }

  private handleDisconnect(socket: any) {
    const roomId = this.playerToRoom.get(socket.id);
    if (!roomId) return;

    const room = this.rooms.get(roomId);
    if (!room) return;

    room.players.delete(socket.id);
    this.playerToRoom.delete(socket.id);

    // Notify other players
    socket.to(roomId).emit('player-left', { playerId: socket.id });

    // Clean up empty rooms
    if (room.players.size === 0) {
      this.rooms.delete(roomId);
      console.log(`Room ${roomId} deleted - no players remaining`);
      log(`Room ${roomId} deleted - no players remaining`);
    }
  }

  private generateRoomId(): string {
    return Math.random().toString(GAME_CONSTANTS.ROOM_ID_GENERATION_RADIX).substring(
        GAME_CONSTANTS.ROOM_ID_GENERATION_SUBSTRING_START, 
        GAME_CONSTANTS.ROOM_ID_GENERATION_SUBSTRING_END
    ).toUpperCase();
  }

  private generatePlayerColor(index: number): string {
    const colors = [
      '#FF6B6B', '#4ECDC4', '#45B7D1', '#96CEB4', '#FFEAA7',
      '#DDA0DD', '#98D8C8', '#F7DC6F', '#BB8FCE', '#85C1E9'
    ];
    return colors[index % colors.length];
  }

  private getRoomInfo(room: GameRoom) {
    return {
      id: room.id,
      name: room.name,
      playerCount: room.players.size,
      maxPlayers: room.maxPlayers,
      aiPlayerCount: room.aiPlayerCount,
      isStarted: room.isStarted,
      gameMode: room.gameMode,
      players: Array.from(room.players.values()).map(p => this.getPlayerInfo(p))
    };
  }

  private getPlayerInfo(player: Player) {
    return {
      id: player.id,
      name: player.name,
      color: player.color,
      type: player.type,
      territoriesOwned: player.territoriesOwned,
      totalArmies: player.totalArmies,
      isEliminated: player.isEliminated
    };
  }
server/index.ts
+2
-1

import express, { type Request, Response, NextFunction } from "express";
import { createServer } from "http";
import { registerRoutes } from "./routes";
import { setupVite, serveStatic, log } from "./vite";
import { setupVite, serveStatic } from "./vite";
import { log } from "../common/utils.js";
import { GameServer } from "./gameServer";

const app = express();
app.use(express.json());
app.use(express.urlencoded({ extended: false }));

app.use((req, res, next) => {
  const start = Date.now();
  const path = req.path;
  let capturedJsonResponse: Record<string, any> | undefined = undefined;

  const originalResJson = res.json;
  res.json = function (bodyJson, ...args) {
    capturedJsonResponse = bodyJson;
    return originalResJson.apply(res, [bodyJson, ...args]);
  };

  res.on("finish", () => {
    const duration = Date.now() - start;
    if (path.startsWith("/api")) {
      let logLine = `${req.method} ${path} ${res.statusCode} in ${duration}ms`;
      if (capturedJsonResponse) {
        logLine += ` :: ${JSON.stringify(capturedJsonResponse)}`;
      }

server/vite.ts
+0
-11

import express, { type Express } from "express";
import fs from "fs";
import path, { dirname } from "path";
import { fileURLToPath } from "url";
import { createServer as createViteServer, createLogger } from "vite";
const __filename = fileURLToPath(import.meta.url);
const __dirname = dirname(__filename);
import { type Server } from "http";
import viteConfig from "../vite.config";
import { nanoid } from "nanoid";

const viteLogger = createLogger();

export function log(message: string, source = "express") {
  const formattedTime = new Date().toLocaleTimeString("en-US", {
    hour: "numeric",
    minute: "2-digit",
    second: "2-digit",
    hour12: true,
  });

  console.log(`${formattedTime} [${source}] ${message}`);
}

export async function setupVite(app: Express, server: Server) {
  const serverOptions = {
    middlewareMode: true,
    hmr: { server },
    allowedHosts: true,
  };

  const vite = await createViteServer({
    ...viteConfig,
    configFile: false,
    customLogger: {
      ...viteLogger,
      error: (msg, options) => {
        viteLogger.error(msg, options);
        process.exit(1);
      },
    },
    server: serverOptions,
    appType: "custom",
  });

  app.use(vite.middlewares);
  app.use("*", async (req, res, next) => {
    const url = req.originalUrl;
