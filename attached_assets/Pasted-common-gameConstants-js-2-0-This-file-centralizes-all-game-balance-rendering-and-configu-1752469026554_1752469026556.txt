common/gameConstants.js
+2
-0

// This file centralizes all game balance, rendering, and configuration constants.
// It is shared between the client and server to ensure a single source of truth.

export const GAME_CONSTANTS = {
    // Debug Configuration
    DEBUG_MODE: false, // Toggle verbose logging and debug features
    
    // Game Core
    DEFAULT_MAP_WIDTH: 2000,
    DEFAULT_MAP_HEIGHT: 2000,
    DEFAULT_GAME_TIMER_MINUTES: 10,
    MAX_TOTAL_PLAYERS: 100,
    HUMAN_PLAYER_ID_PREFIX: 'human',
    AI_PLAYER_ID_PREFIX: 'ai',

    // Player & AI Defaults
    DEFAULT_SINGLE_PLAYER_AI_COUNT: 19,
    DEFAULT_MULTIPLAYER_AI_COUNT: 90,
    DEFAULT_MAP_SIZE_TERRITORIES: 200,
    INITIAL_COLONIZED_ARMY_SIZE: 1,
    INITIAL_STARTING_ARMY_SIZE: 50,
    /** Base hyperdrive range for all players */
    BASE_RANGE: 150,

    // Territory & Map Configuration
    TERRITORY_RADIUS: 25,
    CONNECTION_DISTANCE: 60, // Very short range connections for tactical gameplay
    ARMY_GENERATION_RATE: 1500, // milliseconds per army - faster for more dynamic gameplay

    // Probe System
    PROBE_LAUNCH_COST_FLEET: 10,
    PROBE_COST: 10, // Alias for compatibility
    PROBE_MIN_ARMY_TO_LAUNCH: 11, // Must have more than the cost to launch
    PROBE_UPDATE_INTERVAL_MS: 50,
    PROBE_SPEED_UNITS_PER_UPDATE: 1.25,
    PROBE_SPEED: 25, // Pixels per second

    // Fleet Transfer
    MIN_ARMY_TO_LEAVE_AFTER_TRANSFER: 1,
    TRANSFER_AMOUNT_DIVISOR: 2,
    
    // Fleet Movement Speeds
    FLEET_SPEED: 1.0, // Normal fleet movement speed
    SUBSPACE_SPEED: 1 / 6.0, // Long-range fleets move at 1/6 normal speed
    LONG_RANGE_BASE_SPEED: 25, // Pixels per second for long-range movement (half speed for better visibility)
    LONG_RANGE_MIN_DURATION: 1000, // Minimum 1 second for very short distances
    LONG_RANGE_MAX_DURATION: 20000, // Maximum 20 seconds for very long distances
    
common/gameConstants.ts
+2
-0

// This file centralizes all game balance, rendering, and configuration constants.
// It is shared between the client and server to ensure a single source of truth.

export const GAME_CONSTANTS = {
    // Debug Configuration
    DEBUG_MODE: false, // Toggle verbose logging and debug features
    
    // Game Core
    DEFAULT_MAP_WIDTH: 2000,
    DEFAULT_MAP_HEIGHT: 2000,
    DEFAULT_GAME_TIMER_MINUTES: 10,
    MAX_TOTAL_PLAYERS: 100,
    HUMAN_PLAYER_ID_PREFIX: 'human',
    AI_PLAYER_ID_PREFIX: 'ai',

    // Player & AI Defaults
    DEFAULT_SINGLE_PLAYER_AI_COUNT: 19,
    DEFAULT_MULTIPLAYER_AI_COUNT: 90,
    DEFAULT_MAP_SIZE_TERRITORIES: 200,
    INITIAL_COLONIZED_ARMY_SIZE: 1,
    INITIAL_STARTING_ARMY_SIZE: 50,
    /** Base hyperdrive range for all players */
    BASE_RANGE: 150,

    // Territory & Map Configuration
    TERRITORY_RADIUS: 25,
    CONNECTION_DISTANCE: 60, // Very short range connections for tactical gameplay
    ARMY_GENERATION_RATE: 1500, // milliseconds per army - faster for more dynamic gameplay

    // Probe System
    PROBE_LAUNCH_COST_FLEET: 10,
    PROBE_COST: 10, // Alias for compatibility
    PROBE_MIN_ARMY_TO_LAUNCH: 11, // Must have more than the cost to launch
    PROBE_UPDATE_INTERVAL_MS: 50,
    PROBE_SPEED_UNITS_PER_UPDATE: 1.25,
    PROBE_SPEED: 25, // Pixels per second

    // Fleet Transfer
    MIN_ARMY_TO_LEAVE_AFTER_TRANSFER: 1,
    TRANSFER_AMOUNT_DIVISOR: 2,
    
    // Fleet Movement Speeds
    FLEET_SPEED: 1.0, // Normal fleet movement speed
    SUBSPACE_SPEED: 1 / 6.0, // Long-range fleets move at 1/6 normal speed
    LONG_RANGE_BASE_SPEED: 25, // Pixels per second for long-range movement (half speed for better visibility)
    LONG_RANGE_MIN_DURATION: 1000, // Minimum 1 second for very short distances
    LONG_RANGE_MAX_DURATION: 20000, // Maximum 20 seconds for very long distances
    
common/rangePathfinding.ts
New
+66
-0

export interface Position { x: number; y: number; }

/** Build a full distance matrix for all planets */
export function buildDistanceMatrix(planets: Position[]): Float32Array[] {
  const n = planets.length;
  const matrix: Float32Array[] = new Array(n);
  for (let i = 0; i < n; i++) {
    matrix[i] = new Float32Array(n);
  }
  for (let i = 0; i < n; i++) {
    for (let j = i + 1; j < n; j++) {
      const dx = planets[i].x - planets[j].x;
      const dy = planets[i].y - planets[j].y;
      const d = Math.hypot(dx, dy);
      matrix[i][j] = d;
      matrix[j][i] = d;
    }
  }
  return matrix;
}

/** Build adjacency list based on jump range */
export function buildAdjacencyList(range: number, matrix: Float32Array[]): Int16Array[] {
  const n = matrix.length;
  const adj: Int16Array[] = new Array(n);
  for (let i = 0; i < n; i++) {
    const neighbors: number[] = [];
    for (let j = 0; j < n; j++) {
      if (i !== j && matrix[i][j] <= range) neighbors.push(j);
    }
    adj[i] = Int16Array.from(neighbors);
  }
  return adj;
}

/** Breadth first search returning path or null */
export function findPath(adj: Int16Array[], start: number, target: number): number[] | null {
  if (start === target) return [start];
  const n = adj.length;
  const visited = new Array<boolean>(n).fill(false);
  const prev = new Int16Array(n).fill(-1);
  const queue: number[] = [];
  queue.push(start);
  visited[start] = true;
  while (queue.length) {
    const v = queue.shift()!;
    for (const nb of adj[v]) {
      if (!visited[nb]) {
        visited[nb] = true;
        prev[nb] = v;
        if (nb === target) {
          const path: number[] = [];
          for (let cur = nb; cur !== -1; cur = prev[cur]) path.push(cur);
          return path.reverse();
        }
        queue.push(nb);
      }
    }
  }
  return null;
}

/** Update player range and rebuild adjacency list */
export function updatePlayerRange(range: number, matrix: Float32Array[]): Int16Array[] {
  return buildAdjacencyList(range, matrix);
}
common/types/index.ts
+4
-0

// Shared types for client and server communication.

export interface PlayerState {
  id: string;
  name: string;
  color: string;
  type: 'human' | 'ai';
  socketId?: string;
  territories: number[];
  /** Maximum jump distance for fleets */
  range: number;
  /** Number of hyperdrive upgrades purchased */
  rangeLevel: number;
  armyGenRate: number;
  totalArmies: number;
  territoriesOwned: number;
  isEliminated: boolean;
}

export interface TerritoryState {
  id: number;
  ownerId: string | null;
  armySize: number;
  x: number;
  y: number;
  radius: number;
  neighbors: number[];
  hiddenNeighbors: number[];
  isColonizable: boolean;
  hiddenArmySize: number;
  lastCombatFlash: number;
}

export interface ProbeState {
    id: number;
    fromTerritoryId: number;
    toTerritoryId: number;
    playerId: string;