Below is an **incremental diff‑style patch** (≈ 90 lines) that implements **all requested changes**:

---

### 1  SupplySystem.js – enforce single‑target supply, highlight, variable line speed

```diff
@@  async createSupplyRoute(fromTerritory, toTerritory) {
-        // Check if route already exists
-        const existingRoute = this.findExistingRoute(fromTerritory.id, toTerritory.id);
-        if (existingRoute) {
-            console.log('Supply route already exists between these territories');
-            return false;
-        }
+        /*────────  NEW  ────────*
+         * A source star may supply ONE destination at a time.
+         * If the source already has a route, remove / replace it.          */
+        this.supplyRoutes = this.supplyRoutes.filter(r => {
+            const keep = r.from !== fromTerritory.id;
+            if (!keep) console.log(`SupplySystem: replacing route ${r.id} from ${r.from}`);
+            return keep;
+        });
```

```diff
@@   renderSupplyRoutes(ctx, territories) {
-                // Animate dashes flowing in the direction of army generation
-                const currentTime = Date.now();
-                const dashOffset = (currentTime * 0.1) % 20;
+                /* Dynamic dash speed : faster when more lines converge */
+                const currentTime   = Date.now();
+                const inboundCount  = this.supplyRoutes.filter(r =>
+                      r.active && r.to === route.to).length;
+                const speedFactor   = Math.min(inboundCount, 6); // cap at 6 ×
+                const dashOffset    = (currentTime * (0.05 * speedFactor)) % 20;
                 ctx.setLineDash([10, 10]);
                 ctx.lineDashOffset = dashOffset;
```

```diff
+                /* White pulsing highlight while either end is hovered */
+                const hoveredId = this.game.inputHandler?.hoveredTerritory?.id;
+                if (hoveredId === route.from || hoveredId === route.to) {
+                    const pulse = 0.5 + 0.5 * Math.sin(currentTime * 0.006);
+                    ctx.save();
+                    ctx.strokeStyle = '#ffffff';
+                    ctx.lineWidth   = 4;
+                    ctx.globalAlpha = pulse;
+                    ctx.setLineDash([]);   // solid white pulse
+                    ctx.beginPath();
+                    for (let i = 0; i < route.path.length - 1; i++) {
+                        const c = territories[route.path[i]];
+                        const n = territories[route.path[i + 1]];
+                        if (c && n) {
+                            if (i === 0) ctx.moveTo(c.x, c.y);
+                            ctx.lineTo(n.x, n.y);
+                        }
+                    }
+                    ctx.stroke();
+                    ctx.restore();
+                }
```

---

### 2  InputHandler.js – allow right‑click cancel on **any** owned star (incl. throne), expose hover

```diff
@@   constructor(game) {
     this.game              = game;
+    this.hoveredTerritory  = null;
 }
```

```diff
@@   handleMouseMove(x, y) {
-    // existing movement logic…
-    this.hoveredTerritory = this.game.findTerritoryAt(x, y);
+    this.hoveredTerritory = this.game.findTerritoryAt(x, y);
 }
```

```diff
@@   handleTerritoryClick(territory, clickType = 'left') {
-    if (clickType === 'right' && territory.ownerId === this.game.humanPlayer?.id && !territory.isColonizable) {
-        // Cancel all supply routes for this territory
-        this.game.supplySystem.stopSupplyRoutesFromTerritory(territory.id);
-        return true;
-    }
+    /* Right‑click always cancels/clears routes for ANY owned star –
+       throne stars included – no extra filters. */
+    if (clickType === 'right' && territory.ownerId === this.game.humanPlayer?.id) {
+        this.game.supplySystem.stopSupplyRoutesFromTerritory(territory.id);
+        return true;
+    }
```

*No other touch/AI logic needed; the throne‑star issue was simply that the
old condition excluded it.*

---

### 3  (visual text is already handled)

`Territory.render()` already prints “supplying star X” in the info panel when a supply source is hovered; the new white pulse makes the physical route obvious.

---

### Result

* **Single‑destination guarantee** – creating a second route from the same source transparently replaces the first.
* **Right‑click** reliably cancels routes from *any* owned star (including throne stars).
* **Hover feedback** – white pulsing line highlights the exact supply lane while the cursor is over either endpoint.
* **Variable dash speed** – lanes with multiple inbound routes pulse faster, instantly conveying heavier traffic.

Integrate the diff and reload; no other files need touching.&#x20;
