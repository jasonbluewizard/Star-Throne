diff --git a/client/src/game/GameMap.js b/client/src/game/GameMap.js
index 58dc7e226b19a162df40d495cb04752c78ccb0c5..6e9bd8a42fbff7ab86b362218588bb97ac967237 100644
--- a/client/src/game/GameMap.js
+++ b/client/src/game/GameMap.js
@@ -1,27 +1,28 @@
 import { Territory } from './Territory';
 import MapGenerator from './MapGenerator';
+import Delaunator from 'delaunator';
 
 export class GameMap {
     constructor(width, height, config = {}) {
         this.width = width * 1.4; // Expand width by 40%
         this.height = height * 1.6; // Expand height by 60% for more vertical space
         this.territories = {};
         this.nebulas = []; // Purple nebula clouds
         this.gridSize = 150; // Increased space between territory centers for less crowding
         
         // Spatial indexing for O(1) territory lookups instead of O(n)
         this.spatialGridSize = 100; // Grid cell size in pixels
         this.spatialGrid = new Map(); // Map of "x,y" -> Territory[]
         this.spatialIndexEnabled = true;
         
         // Advanced configuration options
         this.layout = config.layout || 'organic'; // Layout type: organic, clusters, spiral, core, ring, binary
         this.connectionDistance = config.connectionRange || 25; // Max distance for territory connections - prevent long-distance warp lanes
         this.warpLaneDensity = config.warpLaneDensity || 80; // Percentage density for connections
         this.nebulaCount = config.nebulaCount !== undefined ? config.nebulaCount : 10; // Number of nebula fields
         this.nebulaSlowdown = config.nebulaSlowdown !== undefined ? config.nebulaSlowdown : true;
         this.supplyRoutes = config.supplyRoutes !== undefined ? config.supplyRoutes : true;
         this.probeColonization = config.probeColonization !== undefined ? config.probeColonization : true;
     }
     
     // Helper function to check if a point is within organic galaxy boundaries
diff --git a/client/src/game/GameMap.js b/client/src/game/GameMap.js
index 58dc7e226b19a162df40d495cb04752c78ccb0c5..6e9bd8a42fbff7ab86b362218588bb97ac967237 100644
--- a/client/src/game/GameMap.js
+++ b/client/src/game/GameMap.js
@@ -662,67 +663,93 @@ export class GameMap {
     
     // Check if two line segments intersect
     linesIntersect(line1Start, line1End, line2Start, line2End) {
         const x1 = line1Start.x, y1 = line1Start.y;
         const x2 = line1End.x, y2 = line1End.y;
         const x3 = line2Start.x, y3 = line2Start.y;
         const x4 = line2End.x, y4 = line2End.y;
         
         const denom = (x1 - x2) * (y3 - y4) - (y1 - y2) * (x3 - x4);
         if (Math.abs(denom) < 1e-10) return false; // Lines are parallel
         
         const t = ((x1 - x3) * (y3 - y4) - (y1 - y3) * (x3 - x4)) / denom;
         const u = -((x1 - x2) * (y1 - y3) - (y1 - y2) * (x1 - x3)) / denom;
         
         // Check if intersection point is within both line segments
         if (t >= 0.1 && t <= 0.9 && u >= 0.1 && u <= 0.9) { // Added small margin to avoid endpoint intersections
             return true;
         }
         
         return false;
     }
 
     connectTerritories() {
         const territoryList = Object.values(this.territories);
         const existingConnections = []; // Track existing warp lanes to prevent intersections
-        
-        // Use Delaunay triangulation approximation for natural connections
+
+        if (territoryList.length < 2) return;
+
+        const points = territoryList.map(t => [t.x, t.y]);
+        let delaunay = null;
+        try {
+            delaunay = Delaunator.from(points);
+        } catch (err) {
+            console.warn('Delaunay triangulation failed, falling back to naive neighbor search');
+        }
+
+        const neighborSets = territoryList.map(() => new Set());
+
+        if (delaunay) {
+            for (let t = 0; t < delaunay.triangles.length; t += 3) {
+                const a = delaunay.triangles[t];
+                const b = delaunay.triangles[t + 1];
+                const c = delaunay.triangles[t + 2];
+                neighborSets[a].add(b); neighborSets[a].add(c);
+                neighborSets[b].add(a); neighborSets[b].add(c);
+                neighborSets[c].add(a); neighborSets[c].add(b);
+            }
+        } else {
+            for (let i = 0; i < territoryList.length; i++) {
+                for (let j = i + 1; j < territoryList.length; j++) {
+                    neighborSets[i].add(j);
+                    neighborSets[j].add(i);
+                }
+            }
+        }
+
         for (let i = 0; i < territoryList.length; i++) {
             const territory = territoryList[i];
             const nearbyTerritories = [];
-            
-            // Find all territories within connection distance
-            for (let j = 0; j < territoryList.length; j++) {
-                if (i === j) continue;
-                
+
+            neighborSets[i].forEach(j => {
                 const other = territoryList[j];
                 const distance = territory.getDistanceTo(other);
-                
+
                 if (distance <= this.connectionDistance && !this.linePassesThroughTerritory(territory, other, territoryList, existingConnections)) {
                     nearbyTerritories.push({ territory: other, distance });
                 }
-            }
+            });
             
             // Sort by distance and connect to closest neighbors
             nearbyTerritories.sort((a, b) => a.distance - b.distance);
             
             // Connect to 2-6 closest neighbors, influenced by warp lane density
             const baseDensity = this.warpLaneDensity / 100; // Convert percentage to decimal
             const maxConnections = Math.min(6, Math.max(2, nearbyTerritories.length));
             const adjustedConnections = Math.max(1, Math.floor(maxConnections * baseDensity));
             const numConnections = Math.min(adjustedConnections, 2 + Math.floor(Math.random() * 3));
             
             for (let k = 0; k < numConnections && k < nearbyTerritories.length; k++) {
                 const neighbor = nearbyTerritories[k].territory;
                 
                 // Additional density check - some connections may be skipped based on density
                 if (Math.random() * 100 > this.warpLaneDensity) continue;
                 
                 // Track this connection to prevent future intersections
                 existingConnections.push({
                     from: territory,
                     to: neighbor
                 });
                 
                 // All connections are now regular neighbors (no hidden connections)
                 territory.addNeighbor(neighbor.id);
                 neighbor.addNeighbor(territory.id);
