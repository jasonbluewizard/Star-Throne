Below is a concise **design + diff patch** that turns **“click‑and‑drag”** into the primary way to launch *any* fleet transfer:

| Gesture                                                                       | Result                                                                                                                                                     |
| ----------------------------------------------------------------------------- | ---------------------------------------------------------------------------------------------------------------------------------------------------------- |
| **Single click** on a planet                                                  | *Select* / focus that planet (no ships move).                                                                                                              |
| **Click‑and‑drag** from the selected planet to another planet and **release** | • If the target is friendly → **reinforce** (default = 50 %, Shift = 100 %, Ctrl = 25 %).<br>• If the target is enemy/neutral → **attack** (same % rules). |
| Drag ends on empty space                                                      | Cancel (no command).                                                                                                                                       |

No more accidental sends when you just want to change selection; you must drag to issue an order.
The proportional‑drag “pie slider” you already have continues to work if the player pauses mid‑drag.

---

## Patch to implement drag‑to‑command

Copy everything inside the box, open Replit AI chat, type **“Apply patch”**, paste, and send:

```diff
diff --git a/client/src/game/InputStateMachine.js b/client/src/game/InputStateMachine.js
@@
-// DRAG handling: previously only used for camera pan or proportional slider.
-// We now treat a drag that starts on a selected planet and ends on a different
-// planet as the PRIMARY way to send fleets.
+/**
+ * DRAG‑to‑command re‑work:
+ *  ▸ mousedown on selected planet         → begin potential command
+ *  ▸ mousemove beyond small threshold     → enter 'command_drag' sub‑state
+ *  ▸ mouseup over target planet           → issue reinforce/attack
+ *  ▸ mouseup elsewhere                    → cancel
+ */

@@ DefaultState.handleInput(eventType, data)
     case 'drag_start':
-        this.startCameraPanning(data);           // unchanged
+        this.startCameraPanning(data);           // unchanged
         break;
 
@@ TerritorySelectedState.handleInput(eventType,data)
-    case 'drag_start':      this.checkProportionalDrag(data); break;
+    case 'drag_start': {
+        // Start a potential fleet‑command drag ONLY if drag began on the
+        // currently selected friendly planet.
+        if (data.territory === this.selectedTerritory &&
+            this.selectedTerritory.ownerId === this.game.humanPlayer.id) {
+            this.state          = 'command_drag';
+            this.dragSource     = this.selectedTerritory;
+            this.dragStartPos   = { x: data.x, y: data.y };
+        }
+        break;
+    }

@@ new state handler
+// ---------------- command_drag -----------------
+handleCommandDrag(eventType, data) {
+    switch (eventType) {
+        case 'drag_move':      /* ignore */  break;
+        case 'drag_end': {
+            const target = this.game.findTerritoryAt(data.endX, data.endY);
+            if (target && target.id !== this.dragSource.id) {
+                // decide attack vs reinforce
+                const pct = data.shiftKey ? 1.0 :
+                            data.ctrlKey  ? 0.25 : 0.5;
+                this.game.issueFleetCommand(this.dragSource, target, pct);
+            }
+            // Clear drag state and remain in TerritorySelected
+            this.state        = 'territory_selected';
+            this.dragSource   = null;
+            break;
+        }
+        case 'tap': /* ignore */ break;
+    }
+}

diff --git a/client/src/game/InputHandler.js b/client/src/game/InputHandler.js
@@ mousedown handler (start drag)
-    if (e.button === 0) {
+    if (e.button === 0) {
         this.isDragging = true;
         this.dragStartPos = { x: this.mousePos.x, y: this.mousePos.y };
-        this.inputFSM.handleEvent('drag_start', {
-            x: this.mousePos.x, y: this.mousePos.y
-        });
+        // Also pass which territory the drag began on
+        this.inputFSM.handleEvent('drag_start', {
+            x: this.mousePos.x,
+            y: this.mousePos.y,
+            territory: this.game.findTerritoryAt(this.mousePos.x, this.mousePos.y),
+            shiftKey: e.shiftKey,
+            ctrlKey:  e.ctrlKey
+        });
     }

@@ mousemove send drag_move
     if (this.isDragging) {
-        this.inputFSM.handleEvent('drag_move', { x: this.mousePos.x, y: this.mousePos.y });
+        this.inputFSM.handleEvent('drag_move', {
+            x: this.mousePos.x, y: this.mousePos.y
+        });
     }

@@ mouseup send drag_end
             if (this.isDragging) {
-                this.inputFSM.handleEvent('drag_end', {
-                    startX: this.dragStartPos.x,
-                    startY: this.dragStartPos.y,
-                    endX: this.mousePos.x,
-                    endY: this.mousePos.y
-                });
+                this.inputFSM.handleEvent('drag_end', {
+                    startX: this.dragStartPos.x,
+                    startY: this.dragStartPos.y,
+                    endX:   this.mousePos.x,
+                    endY:   this.mousePos.y,
+                    shiftKey: e.shiftKey,
+                    ctrlKey:  e.ctrlKey
+                });
             } else {
                 /* single / double click logic remains unchanged */
             }

*** End Patch
```

### What this patch does

1. **Adds a new FSM sub‑state `command_drag`**
   – Only entered when a drag starts on the currently selected friendly planet.
2. On **drag\_end** it looks at the territory under the cursor:

   * same‑owner → reinforce (50 %, Shift = 100 %, Ctrl = 25 %)
   * enemy/neutral → attack with same % rules
3. **Single click** still just selects / re‑selects planets — no accidental sends.
4. Right‑click logic is fully retired.

### After applying

* Reload, pick one of your planets → **drag** to another: watch fleets launch.
* Try dragging without modifiers (50 %), with **Shift** (100 %), with **Ctrl** (25 %).
* Dragging off into empty space should cancel (no ships).
* Multi‑hop still works because `issueFleetCommand()` hasn’t changed.

Let me know if you prefer refinements (e.g. keep proportional‑drag pie, or add a hover outline while dragging) — but this gets rid of the “must deselect first” annoyance and makes reinforce / invade an intuitive gesture.
