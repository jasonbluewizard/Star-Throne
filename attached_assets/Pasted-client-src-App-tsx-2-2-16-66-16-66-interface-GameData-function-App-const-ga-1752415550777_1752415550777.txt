client/src/App.tsx
+2
-2

@@ -16,66 +16,66 @@ interface GameData {
function App() {
  const gameRef = useRef<any>(null);
  const mountedRef = useRef(false);
  const [showTitleScreen, setShowTitleScreen] = useState(true);
  const [gameMode, setGameMode] = useState<GameMode>(null);
  const [gameData, setGameData] = useState<GameData | null>(null);

  const initSinglePlayerGame = async (data: GameData) => {
    try {
      // Set single-player flag to prevent WebSocket connections
      (window as any).singlePlayerMode = true;
      
      const { default: StarThrone } = await import('./game/StarThrone.js');
      
      // Add mode flag to prevent WebSocket connection attempts
      const gameConfig = {
        ...data,
        mode: 'single-player',
        disableWebSocket: true
      };
      
      gameRef.current = new StarThrone(gameConfig);
      // Initialize the game
      gameRef.current.init();
      console.log('Single-player Star Throne game initialized with config:', gameConfig);
    } catch (error) {
    } catch (error: any) {
      console.error('Failed to initialize single-player game:', error);
      console.error('Error details:', error.message, error.stack);
    }
  };

  const initMultiplayerGame = async (data: GameData) => {
    try {
      // For now, we'll use the same game engine but prepare for multiplayer integration
      const { default: StarThrone } = await import('./game/StarThrone.js');
      gameRef.current = new StarThrone(data);
      // Initialize the game
      gameRef.current.init();
      console.log('Multiplayer-ready Star Throne game initialized');
      console.log('Room data:', data.room);
    } catch (error) {
    } catch (error: any) {
      console.error('Failed to initialize multiplayer game:', error);
    }
  };

  const handleModeSelected = (mode: GameMode, data?: GameData) => {
    setGameMode(mode);
    setGameData(data || null);
    
    // Add game-active class to body when game starts
    document.body.classList.add('game-active');
    
    if (mode === 'single' && data) {
      initSinglePlayerGame(data);
    } else if (mode === 'multiplayer' && data) {
      initMultiplayerGame(data);
    }
  };

  // Auto-start single player if no mode selector is needed (for development)
  useEffect(() => {
    // Check if we should auto-start in single player mode
    const urlParams = new URLSearchParams(window.location.search);
    if (urlParams.get('auto') === 'single' && !mountedRef.current) {
      mountedRef.current = true;
      handleModeSelected('single', { playerName: 'Player', aiCount: 19, layout: 'organic' });