Thanks. I’ll investigate why the Empire Discovery window isn’t showing the permanent bonuses even though the data exists and is routed correctly. I’ll look for possible issues in the `DiscoverySystem.getDiscoveriesForUI()` method, the rendering logic in `GameUI.renderDiscoveryPanel()`, and how that’s connected in `StarThrone.renderUI()`.

I’ll get back to you shortly with a fix or pinpoint the problem and suggest improvements.


# Root Cause: Missing Keys and Mapping in UI Data

The bug stems from how `DiscoverySystem.getDiscoveriesForUI()` packages the permanent bonuses and how the UI code reads them. In the game logic, permanent empire bonuses (e.g. Precursor Weapons, Drive, Shield, Nanotech, Factory, Friendly Aliens, Rich Minerals) are tracked in `this.discoveries` inside **DiscoverySystem.js**. For example, the discovery definitions include entries like:

```js
// In StarThrone.js getDiscoveryTypes():
{id: 'precursor_weapons', type: 'empire_bonus', effect: 'attack_bonus', bonus: 10},  // +10% attack
{id: 'precursor_drive',    type: 'empire_bonus', effect: 'speed_bonus',  bonus: 20},  // +20% speed
{id: 'precursor_shield',   type: 'empire_bonus', effect: 'defense_bonus',bonus: 10},  // +10% defense
{id: 'precursor_nanotech', type: 'empire_bonus', effect: 'production_bonus', bonus: 10},// +10% generation
{id: 'factory_complex',    type: 'planet_bonus', effect: 'factory_planet', bonus: 100},// +100% generation per world
{id: 'rich_minerals',      type: 'planet_bonus', effect: 'mineral_planet', bonus: 50}, // +50% generation per world
{id: 'friendly_aliens',    type: 'positive', effect: 'extra_fleet',    bonus: 50}   // +50 fleet strength
```

. The UI layer (in **GameUI.js**) expects `renderDiscoveryPanel()` to receive these values via `getDiscoveriesForUI()`. However, the permanent bonuses never appear because the UI code isn’t actually receiving (or using) the correct keys/values. For example, **StarThrone.renderUI()** passes the discoveries data like so:

```js
// StarThrone.js – renderUI()
playerDiscoveries: this.discoverySystem 
    ? this.discoverySystem.getDiscoveriesForUI() : {},
```

. If `getDiscoveriesForUI()` does not include the permanent bonus fields (or uses different property names), the panel ends up empty. In short, the discovery-panel code either isn’t iterating those keys or the keys don’t match what DiscoverySystem provides.

# Fixes in DiscoverySystem.js

Ensure that **DiscoverySystem.getDiscoveriesForUI()** returns all permanent bonuses with consistent property names. For example, if `this.discoveries` stores counts or levels under keys like `precursorWeapons`, `precursorDrive`, etc., modify `getDiscoveriesForUI()` to explicitly return them. For example:

```js
// In DiscoverySystem.js
getDiscoveriesForUI() {
    // Return an object containing all permanent empire-wide discovery values
    return {
        // Imperial bonuses
        precursorWeapons: this.discoveries.precursorWeapons || 0,
        precursorDrive:   this.discoveries.precursorDrive   || 0,
        precursorShield:  this.discoveries.precursorShield  || 0,
        precursorNanotech:this.discoveries.precursorNanotech|| 0,
        // Planet bonuses (per-world)
        factoryPlanets:   this.discoveries.factoryPlanets   || 0, // e.g. count of factory worlds
        richMinerals:     this.discoveries.richMinerals     || 0,
        // Friendly aliens (count of events triggered)
        friendlyAliens:   this.discoveries.friendlyAliens   || 0
    };
}
```

Each key should match what the UI expects. If the discovery IDs use underscores (e.g. `precursor_weapons`), ensure the mapping to camelCase is correct. The code above assumes the DiscoverySystem internally uses the camelCase keys (consistent with the question’s description). If not, adjust the keys accordingly. This guarantees `getDiscoveriesForUI()` returns an object like:

```js
{
  precursorWeapons: 2,
  precursorDrive: 1,
  precursorShield: 0,
  precursorNanotech: 0,
  factoryPlanets: 3,
  richMinerals: 1,
  friendlyAliens: 4
}
```

which the UI can consume.

# Fixes in GameUI.js

In **GameUI.js**, the `renderDiscoveryPanel()` method must read those fields and display them. If it was originally only listing recent discoveries (like one-off events), augment it to include permanent bonuses. For example:

```js
// In GameUI.js – inside renderDiscoveryPanel()
const ui = this.ui;  // context or passed-in data
const d = ui.playerDiscoveries || {};

// Example rendering logic (pseudo-code; adapt to actual canvas API)
let y = panelTopY;
ctx.fillStyle = '#fff';
ctx.font = '14px sans-serif';

// Permanent empire-wide bonuses
if (d.precursorWeapons > 0) {
    ctx.fillText(`Precursor Weapons (Weapon Tech): +${d.precursorWeapons * 10}% Attack`, x, y);
    y += lineHeight;
}
if (d.precursorDrive > 0) {
    ctx.fillText(`Precursor Drive (Propulsion): +${d.precursorDrive * 20}% Speed`, x, y);
    y += lineHeight;
}
if (d.precursorShield > 0) {
    ctx.fillText(`Precursor Shield (Defense): +${d.precursorShield * 10}% Defense`, x, y);
    y += lineHeight;
}
if (d.precursorNanotech > 0) {
    ctx.fillText(`Precursor Nanotech: +${d.precursorNanotech * 10}% Generation`, x, y);
    y += lineHeight;
}
if (d.factoryPlanets > 0) {
    ctx.fillText(`Factory Worlds: +${d.factoryPlanets * 100}% Gen. per World`, x, y);
    y += lineHeight;
}
if (d.richMinerals > 0) {
    ctx.fillText(`Rich Minerals: +${d.richMinerals * 50}% Gen. per World`, x, y);
    y += lineHeight;
}
if (d.friendlyAliens > 0) {
    ctx.fillText(`Friendly Alien Events: +${d.friendlyAliens * 50} Fleet Strength`, x, y);
    y += lineHeight;
}
```

Adjust text formatting and positioning as needed. The key point is **GameUI** must explicitly read each discovery field from the `playerDiscoveries` object and render it (for example, multiplying by the percentage value per level). Without these checks, permanent bonuses would not appear.

# Code Changes / Fix Summary

* **DiscoverySystem.js**: Implement or update `getDiscoveriesForUI()` so it returns an object with all permanent bonus fields (e.g. `precursorWeapons`, `precursorDrive`, etc.). This ensures the UI can access them.
* **GameUI.js**: In `renderDiscoveryPanel()`, add code to iterate or check those fields and draw them on the panel. For each field (e.g. `precursorWeapons`), display the description and calculate the total bonus (e.g. level×10%).
* **StarThrone.js**: No changes needed here if it already passes `playerDiscoveries = discoverySystem.getDiscoveriesForUI()`. Just ensure it’s using `getDiscoveriesForUI()` (as shown in ) and the resulting object has the correct shape.

# Validating `getDiscoveriesForUI()`

After fixing, verify that `getDiscoveriesForUI()` returns the expected structure. For example, you can add a debug log or unit test:

```js
const uiData = discoverySystem.getDiscoveriesForUI();
console.assert(typeof uiData.precursorWeapons === 'number', 'Missing precursorWeapons');
console.assert(typeof uiData.friendlyAliens === 'number',   'Missing friendlyAliens');
// ...and so on for each key
console.log('Discoveries for UI:', uiData);
```

Each key should exist (even if 0) and match the discovery levels or counts. For instance, if the player found 2 weapon caches and 1 friendly-alien event, you might see:

```
Discoveries for UI: {
  precursorWeapons: 2,
  precursorDrive: 0,
  precursorShield: 0,
  precursorNanotech: 0,
  factoryPlanets: 0,
  richMinerals: 0,
  friendlyAliens: 1
}
```

and the UI should list “+20% Attack (Level 2)” for weapons and “+50 Fleet Strength” for friendly aliens.

# UI Design Suggestions

To make the Discovery panel clear:

* **Group by Category:** Separate *Empire-wide bonuses* (weapons, drive, shield, nanotech, friendly aliens) and *Planet-specific bonuses* (factory worlds, rich minerals). Use subheadings or icons to distinguish them.
* **Use Descriptive Labels:** Instead of raw keys, use readable names: e.g. “Precursor Weapons Cache” or “Weapon Tech Bonus”.
* **Show Totals and Per-Item Effects:** For bonuses that scale with “per level” (like +10% per level of weapons tech), show the level (or total bonus). E.g. “Precursor Weapons (Level 2): +20% Attack.” For “per world” bonuses, show count of worlds.
* **Consistency in Formatting:** Present bonuses as percentages or flat numbers with units (e.g. “+10% Attack”, “+50 Fleet Strength”). Use consistent color or icons for positive effects.

A possible bullet-list layout could be:

* **Weapon Tech (Precursor Weapons):** Level 2 ⇒ +20% Attack power.
* **Propulsion Tech (Precursor Drive):** Level 1 ⇒ +20% Ship speed.
* **Shield Tech (Precursor Shield):** Level 0 (not yet discovered) ⇒ (not shown).
* **Nanotech (Precursor Nanotech):** Level 1 ⇒ +10% Army generation.
* **Factory Worlds:** 3 worlds ⇒ +300% army generation total.
* **Rich Minerals:** 1 world ⇒ +50% army generation on that world.
* **Friendly Alien Events:** Occurred 4 times ⇒ +200 Fleet Strength total.

Each entry clarifies the effect and scales with discovery count. Making these explicit ensures players see *all* permanent bonuses at a glance.

**In summary:** Modify **DiscoverySystem.getDiscoveriesForUI()** to include every permanent bonus field, and update **GameUI.renderDiscoveryPanel()** to display them. This ensures the Empire Discovery window shows all of the expected permanent bonuses (weapons, drive, shields, nanotech, factory worlds, friendly aliens, rich minerals, etc.). The panel should label each bonus clearly, along with its total effect.
